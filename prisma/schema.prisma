// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

model Task {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @db.VarChar(255)
  description String   @db.VarChar(600)
  startDate   DateTime?
  endDate     DateTime?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  users       User[]
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    Int
}

model Status {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  tasks     Task[]
}

model Project {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @db.VarChar(255)
  description String    @db.VarChar(600)
  tasks       Task[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
}

model Workspace {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @db.VarChar(255)
  description String    @db.VarChar(600)
  projects    Project[]
  organization     Organization?  @relation(fields: [organizationId], references: [id])
  organizationId   Int?
}

model Organization {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String      @db.VarChar(255)
  description String      @db.VarChar(600)
  workspaces  Workspace[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String    @db.VarChar(255)
  lastName      String    @db.VarChar(255)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  tasks         Task[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
